From 0c939cc3bdd5d0465bb7e7586d8506b3621e9828 Mon Sep 17 00:00:00 2001
From: Pengpeng Chen <pengpeng.chen@cortina-access.com>
Date: Wed, 26 Aug 2020 17:33:29 +0800
Subject: [PATCH] Add Dosilicon spi-nand devices support

Type: fix
Scope: saturn-sfu, saturn2-sfu
Bug: N/A
Signed-off-by: Pengpeng Chen <pengpeng.chen@cortina-access.com>
---
 drivers/mtd/spinand/Makefile    |  10 ++-
 drivers/mtd/spinand/core.c      |   1 +
 drivers/mtd/spinand/dosilicon.c | 151 ++++++++++++++++++++++++++++++++++++++++
 include/linux/mtd/spinand.h     |   1 +
 4 files changed, 162 insertions(+), 1 deletion(-)
 create mode 100644 drivers/mtd/spinand/dosilicon.c

diff --git a/drivers/mtd/spinand/Makefile b/drivers/mtd/spinand/Makefile
index e720b3d..7144706 100644
--- a/drivers/mtd/spinand/Makefile
+++ b/drivers/mtd/spinand/Makefile
@@ -3,7 +3,15 @@
 # linux/drivers/spinand/Makefile
 #
 
-spinand-objs := core.o gigadevice.o macronix.o micron.o paragon.o toshiba.o winbond.o
+spinand-objs := core.o \
+	gigadevice.o \
+	macronix.o \
+	micron.o \
+	paragon.o \
+	toshiba.o \
+	winbond.o \
+	dosilicon.o
+
 obj-$(CONFIG_MTD_SPI_NAND) += spinand.o
 
 obj-$(CONFIG_MTD_NAND_CORE) += nandcore/
diff --git a/drivers/mtd/spinand/core.c b/drivers/mtd/spinand/core.c
index 2578032..3ee7db9 100644
--- a/drivers/mtd/spinand/core.c
+++ b/drivers/mtd/spinand/core.c
@@ -803,6 +803,7 @@ static int spinand_mtd_block_isreserved(struct mtd_info *mtd, loff_t offs)
 	&paragon_spinand_manufacturer,
 	&toshiba_spinand_manufacturer,
 	&winbond_spinand_manufacturer,
+	&dosilicon_spinand_manufacturer,
 };
 
 static int spinand_manufacturer_detect(struct spinand_device *spinand)
diff --git a/drivers/mtd/spinand/dosilicon.c b/drivers/mtd/spinand/dosilicon.c
new file mode 100644
index 00000000..a08ac2b
--- /dev/null
+++ b/drivers/mtd/spinand/dosilicon.c
@@ -0,0 +1,151 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2020 Cortina Access
+ *
+ * Author: PengPeng Chen <pengpeng.chen@cortina-access.com>
+ */
+
+#include <linux/device.h>
+#include <linux/kernel.h>
+#include <linux/mtd/spinand.h>
+
+#define SPINAND_MFR_DOSILICON		0xE5
+#define DOSILICON_ECCSR_MASK		0x0F
+
+static SPINAND_OP_VARIANTS(read_cache_variants,
+		SPINAND_PAGE_READ_FROM_CACHE_X4_OP(0, 1, NULL, 0),
+		SPINAND_PAGE_READ_FROM_CACHE_X2_OP(0, 1, NULL, 0),
+		SPINAND_PAGE_READ_FROM_CACHE_OP(true, 0, 1, NULL, 0),
+		SPINAND_PAGE_READ_FROM_CACHE_OP(false, 0, 1, NULL, 0));
+
+static SPINAND_OP_VARIANTS(write_cache_variants,
+		SPINAND_PROG_LOAD_X4(true, 0, NULL, 0),
+		SPINAND_PROG_LOAD(true, 0, NULL, 0));
+
+static SPINAND_OP_VARIANTS(update_cache_variants,
+		SPINAND_PROG_LOAD_X4(false, 0, NULL, 0),
+		SPINAND_PROG_LOAD(false, 0, NULL, 0));
+
+static int ds35qxga_ooblayout_ecc(struct mtd_info *mtd, int section,
+				      struct mtd_oob_region *region)
+{
+	return -ERANGE;
+}
+
+static int ds35qxga_ooblayout_free(struct mtd_info *mtd, int section,
+				       struct mtd_oob_region *region)
+{
+	if (section)
+		return -ERANGE;
+
+	region->offset = 2;
+	region->length = mtd->oobsize - 2;
+
+	return 0;
+}
+
+static const struct mtd_ooblayout_ops ds35qxga_ooblayout = {
+	.ecc = ds35qxga_ooblayout_ecc,
+	.free = ds35qxga_ooblayout_free,
+};
+
+static int ds35q1ga_get_eccsr(struct spinand_device *spinand, u8 *eccsr)
+{
+	struct spi_mem_op op = SPI_MEM_OP(SPI_MEM_OP_CMD(0x7c, 1),
+					  SPI_MEM_OP_NO_ADDR,
+					  SPI_MEM_OP_DUMMY(1, 1),
+					  SPI_MEM_OP_DATA_IN(1, eccsr, 1));
+
+	int ret = spi_mem_exec_op(spinand->spimem, &op);
+
+	if (ret)
+		return ret;
+
+	*eccsr &= DOSILICON_ECCSR_MASK;
+	return 0;
+}
+
+static int ds35q1ga_ecc_get_status(struct spinand_device *spinand,
+				       u8 status)
+{
+	struct nand_device *nand = spinand_to_nand(spinand);
+	u8 eccsr;
+
+	switch (status & STATUS_ECC_MASK) {
+	case STATUS_ECC_NO_BITFLIPS:
+		return 0;
+
+	case STATUS_ECC_UNCOR_ERROR:
+		return -EBADMSG;
+
+	case STATUS_ECC_HAS_BITFLIPS:
+		/*
+		 * Let's try to retrieve the real maximum number of bitflips
+		 * in order to avoid forcing the wear-leveling layer to move
+		 * data around if it's not necessary.
+		 */
+		if (ds35q1ga_get_eccsr(spinand, &eccsr))
+			return nand->eccreq.strength;
+
+		if (WARN_ON(eccsr > nand->eccreq.strength || !eccsr))
+			return nand->eccreq.strength;
+
+		return eccsr;
+
+	default:
+		break;
+	}
+
+	return -EINVAL;
+}
+
+static const struct spinand_info dosilicon_spinand_table[] = {
+	SPINAND_INFO("DS35Q1GA_IB", 0x71,
+		     NAND_MEMORG(1, 2048, 64, 64, 1024, 1, 1, 1),
+		     NAND_ECCREQ(4, 512),
+		     SPINAND_INFO_OP_VARIANTS(&read_cache_variants,
+					      &write_cache_variants,
+					      &update_cache_variants),
+		     SPINAND_HAS_QE_BIT,
+		     SPINAND_ECCINFO(&ds35qxga_ooblayout,
+				     ds35q1ga_ecc_get_status)),
+	SPINAND_INFO("DS35Q2GA_IB", 0x72,
+		     NAND_MEMORG(1, 2048, 64, 64, 2048, 2, 1, 1),
+		     NAND_ECCREQ(4, 512),
+		     SPINAND_INFO_OP_VARIANTS(&read_cache_variants,
+					      &write_cache_variants,
+					      &update_cache_variants),
+		     SPINAND_HAS_QE_BIT,
+		     SPINAND_ECCINFO(&ds35qxga_ooblayout, NULL)),
+};
+
+static int dosilicon_spinand_detect(struct spinand_device *spinand)
+{
+	u8 *id = spinand->id.data;
+	int ret;
+
+	/*
+	 * SPI NAND read ID needs a dummy byte, so the first byte in
+	 * raw_id is garbage.
+	 */
+	if (id[1] != SPINAND_MFR_DOSILICON)
+		return 0;
+
+	ret = spinand_match_and_init(spinand, dosilicon_spinand_table,
+				     ARRAY_SIZE(dosilicon_spinand_table),
+				     id[2]);
+	if (ret)
+		return ret;
+
+	return 1;
+}
+
+static const struct spinand_manufacturer_ops dosilicon_spinand_manuf_ops = {
+	.detect = dosilicon_spinand_detect,
+};
+
+const struct spinand_manufacturer dosilicon_spinand_manufacturer = {
+	.id = SPINAND_MFR_DOSILICON,
+	.name = "Dosilicon",
+	.ops = &dosilicon_spinand_manuf_ops,
+};
diff --git a/include/linux/mtd/spinand.h b/include/linux/mtd/spinand.h
index 8da8c13..ab8a412 100644
--- a/include/linux/mtd/spinand.h
+++ b/include/linux/mtd/spinand.h
@@ -200,6 +200,7 @@ struct spinand_manufacturer {
 extern const struct spinand_manufacturer paragon_spinand_manufacturer;
 extern const struct spinand_manufacturer toshiba_spinand_manufacturer;
 extern const struct spinand_manufacturer winbond_spinand_manufacturer;
+extern const struct spinand_manufacturer dosilicon_spinand_manufacturer;
 
 /**
  * struct spinand_op_variants - SPI NAND operation variants
-- 
1.8.3.1

